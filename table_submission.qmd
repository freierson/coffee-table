---
title: "Coffee Table"
subtitle: "Unlocking Coffee's Secrets: Exploring Flavour Notes in James Hoffman's Large Scale Blind Taste Test"
title-block-banner: banner.avif
---

<link rel="preconnect" href="https://fonts.googleapis.com"><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><link href="https://fonts.googleapis.com/css2?family=Noto+Color+Emoji&family=Noto+Emoji:wght@300..700&display=swap" rel="stylesheet">

<!-- <img src="" class = "banner-img page-full"/>  -->

James Hoffman, a coffee expert and YouTuber ran a blind coffee taste test in October of 2023 that involved participants receiving coffee taste kits. The same kind of kenyan coffee bean was given at three levels of roast, light <img src="docs/coffee-bean-filled-roast-brew.svg" class="bean-often a_prop" alt="coffe bean"> medium <img src="docs/coffee-bean-filled-roast-brew.svg" class="bean-often b_prop" alt="coffe bean">, and dark <img src="docs/coffee-bean-filled-roast-brew.svg" class="bean-often c_prop" alt="coffe bean">. There was also a columbian coffee bean <img src="docs/coffee-bean-filled-roast-brew.svg" class="bean-often d_prop" alt="coffe bean"> that went through a natural fermentation process. People were asked to record flavour notes for each coffee, rate them on bitterness (1-5), acidity (1-5), and general enjoyment (1-5). Our table aims to highlight what type of coffee each flavour note typically describes. To understand the table better, expand a flavour note to learn about it.

<!-- <span class = "credits">Image courtesy of [unsplash.com](https://unsplash.com/photos/coffee-bean-lot-TD4DBagg2wE) </span> -->

```{r}
#| warning: false
#| message: false
#| echo: false
library(tidyverse)
library(reactable)
library(reactablefmtr)
library(htmltools)
```

<script src='https://unpkg.com/popper.js@1'></script><script src='https://unpkg.com/tippy.js@5'></script><link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" rel="stylesheet" type="text/css" />

```{r}
#| warning: false
#| message: false
#| echo: false
table_data <- read_csv("table_data.csv") |>
  rename(n = N, a_prop = a, b_prop = b, c_prop = c, d_prop = d) |>
  select(-p.value)
```


```{css}
#| echo: false 

.noto-emoji-coffee {
  font-family: "Noto Color Emoji", sans-serif;
  font-optical-sizing: auto;
  font-style: normal;
}

.round-flag-icon {
  position: relative;
  display: inline-block;
  background-size: contain;
  background-position: center;
  background-repeat: no-repeat;
}

/* KE
BR, CR, SV, ET
ET, ID
CO */

.flag-size-m {
  width: 1rem;
  height: 1rem;
}

.flag-size-l {
  width: 2rem;
  height: 2rem;
}

.round-flag-bean-b {
  background-image: url('flags/bean-b.png')
}

.round-flag-bean-c {
  background-image: url('flags/bean-c.png')
}

.round-flag-ke {
  background-image: url('flags/ke.svg')
}

.round-flag-co {
  background-image: url('flags/co.svg')
}

audio { 
  -moz-border-radius: 15px;
  border-radius: auto;
}

.subtitle {
  font-weight: bold;
}

.bean-header {
  width: 2em;
}

.bean-header-flag {
  font-size: 2em;
}

.bean-often {
  width: 1em;
}

.grouped-header {
  font-size: 2em;
}

.a_prop {
  filter: invert(94%) sepia(12%) saturate(520%) hue-rotate(331deg) brightness(90%) contrast(89%);
}

.b_prop {
  filter: invert(40%) sepia(4%) saturate(5059%) hue-rotate(330deg) brightness(90%) contrast(78%);
}

.c_prop {
  filter: invert(11%) sepia(15%) saturate(1762%) hue-rotate(324deg) brightness(94%) contrast(85%);
}

.d_prop {
  filter: invert(36%) sepia(54%) saturate(394%) hue-rotate(56deg) brightness(93%) contrast(90%);
}
.rt-text-content {
  width: 100%;
}
.bean-header-container {
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
}

.up {
  color: #e00000;
}
.down {
  color: #008000;
}

.description-container {
  display: flex;
  flex-direction: row;
  justify-content: center;
}
.card {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    padding: 20px;
    max-width: 30em;
    text-align: center;
}

.card h2 {
    margin-top: 0;
    font-size: 24px;
}

.card p {
    font-size: 16px;
    color: #666;
}
```

```{js}
#| echo: false

var get_bean_icon = function(label, size) {
  let flag;
  switch(label) {
    case 'a':
      flag = `<i class='round-flag-icon round-flag-ke flag-size-${size}'></i>`;
      break;
    case 'b':
      flag = `<i class='round-flag-icon round-flag-bean-b flag-size-${size}'></i>`;
      break;
    case 'c':
      flag = `<i class='round-flag-icon round-flag-bean-c flag-size-${size}'></i>`;
      break;
    case 'd':
      flag = `<i class='round-flag-icon round-flag-co flag-size-${size}'></i>`;
      break;
  }
  return flag;
}

var bean_header_fn = function(cellInfo, tableState) {
  // const flag = cellInfo.id == 'd_prop' ? '&#x1F1E8;&#x1F1F4' : '&#x1F1F0;&#x1F1EA';
  const country_label = cellInfo.id == 'd_prop' ? 'Columbia' : 'Kenya';
  var flag = get_bean_icon(cellInfo.id.substr(0,1), "l")
  if(cellInfo.id == 'd_prop') {
    roast_label = 'Columbian fermented bean';
  } else if(cellInfo.id == 'c_prop') {
    roast_label = 'Kenyan Dark roasted beans'
  } else if(cellInfo.id == 'b_prop') {
    roast_label = 'Kenyan Medium roasted beans'
  } else {
    roast_label = 'Kenyan Light roasted beans'
  }

  if (document.querySelectorAll('[data-tippy-content]').length > 0) {
    tippy('[data-tippy-content]')
  }

  return `<div class = 'bean-header-container'><span class = 'bean-header-flag noto-emoji-coffee' data-tippy-content = '${country_label}'>${flag}</span><img src='docs/coffee-bean-filled-roast-brew.svg' data-tippy-content='${roast_label}' class='bean-header ${cellInfo.id}' alt = 'coffee bean'/></div>`
}

var up_down_arrow_fn = function(cellInfo, tableState) {
  return `${cellInfo.value}<span class = 'noto-emoji-coffee'>${cellInfo.value <= 0 ? '&#x25BC;' : '&#x25B2;'}</span>`;
}

var thumbs_up_down_fn = function(cellInfo, tableState) {
  return `${cellInfo.value}<span class='noto-emoji-coffee'> ${cellInfo.value <= 0 ? '👎' : '👍'}</span>`;
}

var most_often_fn = function(cellInfo, tableState) {
  return cellInfo.value.split(',').map(x => {
      flag = get_bean_icon(x.trim(), "m");
      return `<span class='noto-emoji-coffee'> ${flag}</span> <img src='docs/coffee-bean-filled-roast-brew.svg' class='bean-often ${x}_prop' alt = 'coffe bean'/>`
    }).join()
}
```

```{r}
#| echo: false
#| message: false
#| warning: false

bean_header <- JS("(cellInfo, tableState) => bean_header_fn(cellInfo, tableState)")

up_down_arrow <- JS("(cellInfo, tableState) => up_down_arrow_fn(cellInfo, tableState)")

thumbs_up_down <- JS("(cellInfo, tableState) => thumbs_up_down_fn(cellInfo, tableState)")

most_often <- JS("(cellInfo, tableState) => most_often_fn(cellInfo, tableState)")
```


```{r}
#| echo: false
#| message: false
#| warning: false

bean_cell_bars <- data_bars(
  data = table_data,
  text_position = "above",
  tooltip = TRUE,
  fill_color = "#804A26",
  number_fmt = scales::label_percent(accuracy = 0.1)
)
```

```{r}
#| echo: false
#| message: false
#| warning: false

color_pos_neg <- function(value) {
        color <- if (value > 0) {
          "#008000"
        } else if (value <= 0) {
          "#e00000"
        }
        list(fontWeight = 600, color = color)
      }
```

<script>let playSound = (x) => new Audio(x).play()</script>

```{r}
#| column: screen-inset
#| echo: false

reactable(
  table_data |>
    select(note, sentiment,bitterness, acidity,mentioned_with,most_often,  a_prop, b_prop, c_prop, d_prop),
  defaultColDef = colDef(format = colFormat(digits = 2)),
  pagination = FALSE,
  defaultPageSize = nrow(table_data),
  details = function(index, column_name){
    return(tagList(
      div(
        class = "description-container",
        div(
          class = "card",
          div(span(table_data$note[index], style = "font-size: 2em;")),
          p(table_data$description[index]),
          # span("  🔊",
          #   style = "font-size: 1.2em; cursor: pointer", 
          #   onclick = glue::glue("playSound('text-to-speech/{table_data$note[index]}.mp3')")
          # )
          span(style="display:flex; flex-direction: row; justify-content: center;", 
            tag("audio", list(controls=TRUE, controlsList="nodownload", src=glue::glue("text-to-speech/{table_data$note[index]}.mp3")))
          )
        )
      )
    ))
  },
  columns = list(
    note = colDef(name = "Coffee flavour note"),
    n = colDef(name = "Occurences", format = colFormat(digits = 0), width = 120),
    a_prop = colDef(
      header = bean_header, 
      cell = bean_cell_bars,
      html = TRUE
    ),
    b_prop = colDef(
      header = bean_header,
      html = TRUE,
      cell = bean_cell_bars
    ),
    c_prop = colDef(
      header = bean_header,
      html = TRUE,
      cell = bean_cell_bars
    ),
    d_prop = colDef(
      header = bean_header,
      html = TRUE,
      cell = bean_cell_bars
    ),
    most_often = colDef(
      name = "Best describes <i class='fa-regular fa-circle-question' data-tippy-content='How much do people prefer this note?'></i>", format = colFormat(digits = 2),
      width = 130,
      cell = most_often,
      html = TRUE
    ),
    bitterness = colDef(
      name = "Bitterness <i class='fa-regular fa-circle-question' data-tippy-content='How much do people prefer this note?'></i>",
      style = \(x) list(fontWeight = 600),
      cell = up_down_arrow,
      html = TRUE
    ),
    acidity = colDef(
      name = "Acidity <i class='fa-regular fa-circle-question' data-tippy-content='How much do people prefer this note?'></i>",
      style = \(x) list(fontWeight = 600),
      cell = up_down_arrow,
      html = TRUE
    ),
    mentioned_with = colDef(name = "Complimentary note <i class='fa-regular fa-circle-question' data-tippy-content='How much do people prefer this note?'></i>", width = 150, html = TRUE),
    sentiment = colDef(
      name = "Sentiment <i class='fa-regular fa-circle-question' data-tippy-content='How much do people prefer this note?'></i>",
      format = colFormat(digits = 2),
      style = color_pos_neg,
      cell = thumbs_up_down,
      html = TRUE
    ))
)
```