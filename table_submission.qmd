---
title: "Coffee Table"
subtitle: "Unlocking Coffee's Secrets: Exploring Flavour Notes in James Hoffman's Large Scale Blind Taste Test"
title-block-banner: banner.avif
---

<!-- <img src="" class = "banner-img page-full"/>  -->

James Hoffman, a coffee expert and YouTuber ran a blind coffee taste test in October of 2023 that involved participants receiving coffee taste kits. The same kind of kenyan coffee bean was given at three levels of roast, light <img src="https://www.svgrepo.com/show/493660/coffee-bean-filled-roast-brew.svg" class="bean-often a_prop" alt="coffe bean"> medium <img src="https://www.svgrepo.com/show/493660/coffee-bean-filled-roast-brew.svg" class="bean-often b_prop" alt="coffe bean">, and dark <img src="https://www.svgrepo.com/show/493660/coffee-bean-filled-roast-brew.svg" class="bean-often c_prop" alt="coffe bean">. There was also a columbian coffee bean <img src="https://www.svgrepo.com/show/493660/coffee-bean-filled-roast-brew.svg" class="bean-often d_prop" alt="coffe bean"> that went through a natural fermentation process. People were asked to record flavour notes for each coffee, rate them on bitterness (1-5), acidity (1-5), and general enjoyment (1-5). Our table aims to highlight what type of coffee each flavour note typically describes. To understand the table better, expand a flavour note to learn about it.

<!-- <span class = "credits">Image courtesy of [unsplash.com](https://unsplash.com/photos/coffee-bean-lot-TD4DBagg2wE) </span> -->

```{r}
#| warning: false
#| message: false
#| echo: false
library(tidyverse)
library(reactable)
library(reactablefmtr)
library(htmltools)
```

<script src='https://unpkg.com/popper.js@1'></script><script src='https://unpkg.com/tippy.js@5'></script><link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" rel="stylesheet" type="text/css" />

```{r}
#| warning: false
#| message: false
#| echo: false
table_data <- read_csv("table_data.csv") |>
  rename(n = N, a_prop = a, b_prop = b, c_prop = c, d_prop = d) |>
  select(-p.value)
```


```{css}
#| echo: false 

.subtitle {
  font-weight: bold;
}

.bean-header {
  width: 2em;
}

.bean-header-flag {
  font-size: 2em;
}

.bean-often {
  width: 1em;
}

.grouped-header {
  font-size: 2em;
}

.a_prop {
  filter: invert(94%) sepia(12%) saturate(520%) hue-rotate(331deg) brightness(90%) contrast(89%);
}

.b_prop {
  filter: invert(40%) sepia(4%) saturate(5059%) hue-rotate(330deg) brightness(90%) contrast(78%);
}

.c_prop {
  filter: invert(11%) sepia(15%) saturate(1762%) hue-rotate(324deg) brightness(94%) contrast(85%);
}

.d_prop {
  filter: invert(36%) sepia(54%) saturate(394%) hue-rotate(56deg) brightness(93%) contrast(90%);
}
.rt-text-content {
  width: 100%;
}
.bean-header-container {
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
}

.up {
  color: #e00000;
}
.down {
  color: #008000;
}

.description-container {
  display: flex;
  flex-direction: row;
  justify-content: center;
}
.card {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    padding: 20px;
    max-width: 30em;
    text-align: center;
}

.card h2 {
    margin-top: 0;
    font-size: 24px;
}

.card p {
    font-size: 16px;
    color: #666;
}
```

```{r}
#| echo: false
#| message: false
#| warning: false

bean_header <- JS("
  function(cellInfo, tableState) {
    const flag = cellInfo.id == 'd_prop' ? '🇨🇴' : '🇰🇪';
    const country_label = cellInfo.id == 'd_prop' ? 'Columbia' : 'Kenya';
    var roast_label;
    if(cellInfo.id == 'd_prop') {
      roast_label = 'Columbian fermented bean';
    } else if(cellInfo.id == 'c_prop') {
      roast_label = 'Kenyan Dark roasted beans'
    } else if(cellInfo.id == 'b_prop') {
      roast_label = 'Kenyan Medium roasted beans'
    } else {
      roast_label = 'Kenyan Light roasted beans'
    }

    if (document.querySelectorAll('[data-tippy-content]').length > 0) {
      tippy('[data-tippy-content]')
    }

    return `<div class = 'bean-header-container'><span class = 'bean-header-flag' data-tippy-content = '${country_label}'>${flag}</span><img src='https://www.svgrepo.com/show/493660/coffee-bean-filled-roast-brew.svg' data-tippy-content='${roast_label}' class='bean-header ${cellInfo.id}' alt = 'coffee bean'/></div>`
  }
")

up_down_arrow <- JS("
  function(cellInfo, tableState) {
    return `${cellInfo.value}<span>${cellInfo.value <= 0 ? '&#x25BC;' : '&#x25B2;'}</span>`;
  }
")

thumbs_up_down <- JS("
  function(cellInfo, tableState) {
    return `${cellInfo.value}<span> ${cellInfo.value <= 0 ? '👎' : '👍'}</span>`;
  }
")
```


```{r}
#| echo: false
#| message: false
#| warning: false

bean_cell_bars <- data_bars(
  data = table_data,
  text_position = "above",
  tooltip = TRUE,
  fill_color = "#804A26",
  number_fmt = scales::label_percent(accuracy = 0.1)
)
```

```{r}
#| echo: false
#| message: false
#| warning: false

color_pos_neg <- function(value) {
        color <- if (value > 0) {
          "#008000"
        } else if (value <= 0) {
          "#e00000"
        }
        list(fontWeight = 600, color = color)
      }
```

<script>let playSound = (x) => new Audio(x).play()</script>

```{r}
#| column: screen-inset
#| echo: false

reactable(
  table_data |>
    select(note, sentiment,bitterness, acidity,mentioned_with,most_often,  a_prop, b_prop, c_prop, d_prop),
  defaultColDef = colDef(format = colFormat(digits = 2)),
  pagination = FALSE,
  defaultPageSize = nrow(table_data),
  details = function(index, column_name){
    return(tagList(
      div(
        class = "description-container",
        div(
          class = "card",
          div(span(table_data$note[index], style = "font-size: 2em;"), span("  🔊", style = "font-size: 1.2em; cursor: pointer", onclick = glue::glue("playSound('text-to-speech/{table_data$note[index]}.mp3')"))),
          p(table_data$description[index])
        )
      )
    ))
  },
  columns = list(
    note = colDef(name = "Coffee flavour note"),
    n = colDef(name = "Occurences", format = colFormat(digits = 0), width = 120),
    a_prop = colDef(
      header = bean_header, 
      cell = bean_cell_bars,
      html = TRUE
    ),
    b_prop = colDef(
      header = bean_header,
      html = TRUE,
      cell = bean_cell_bars
    ),
    c_prop = colDef(
      header = bean_header,
      html = TRUE,
      cell = bean_cell_bars
    ),
    d_prop = colDef(
      header = bean_header,
      html = TRUE,
      cell = bean_cell_bars
    ),
    most_often = colDef(
      name = "Best describes", format = colFormat(digits = 2),
      width = 110,
    cell = JS("
      function(cellInfo, tableState) {

        return cellInfo.value.split(',').map(x => {
          return `${cellInfo.id == 'd_prop' ? '🇨🇴' : '🇰🇪'} <img src='https://www.svgrepo.com/show/493660/coffee-bean-filled-roast-brew.svg' class='bean-often ${x}_prop' alt = 'coffe bean'/>`
        }).join()
      }
    "), html = TRUE),
    bitterness = colDef(
      name = "Bitterness",
      style = \(x) list(fontWeight = 600),
      cell = up_down_arrow,
      html = TRUE
    ),
    acidity = colDef(
      name = "Acidity",
      style = \(x) list(fontWeight = 600),
      cell = up_down_arrow,
      html = TRUE
    ),
    mentioned_with = colDef(name = "Complimentary note", width = 150),
    sentiment = colDef(
      name = "Sentiment",
      format = colFormat(digits = 2),
      style = color_pos_neg,
      cell = thumbs_up_down,
      html = TRUE
    ))
)
```