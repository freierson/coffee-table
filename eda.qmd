---
title: "Coffee Consumption EDA "
format: html
---

```{r}
library(tidyverse)
coffee <- read_csv('coffee.csv')
```

```{r}
library(tidyverse)
library(janitor)
library(here)
library(fs)

coffee_survey_raw <- readr::read_csv(file = 'coffee.csv', show_col_types = F)

coffee <- coffee_survey_raw |> 
  janitor::clean_names() |> 
  # Get rid of one-hot encoding; users can do that if they'd like. Also,
  # "flavorings" columns are empty.
  dplyr::select(
    submission_id,
    age = what_is_your_age,
    cups = how_many_cups_of_coffee_do_you_typically_drink_per_day,
    where_drink = where_do_you_typically_drink_coffee,
    brew = how_do_you_brew_coffee_at_home,
    brew_other = how_else_do_you_brew_coffee_at_home,
    purchase = on_the_go_where_do_you_typically_purchase_coffee,
    purchase_other = where_else_do_you_purchase_coffee,
    favorite = what_is_your_favorite_coffee_drink,
    favorite_specify = please_specify_what_your_favorite_coffee_drink_is,
    additions = do_you_usually_add_anything_to_your_coffee,
    additions_other = what_else_do_you_add_to_your_coffee,
    dairy = what_kind_of_dairy_do_you_add,
    sweetener = what_kind_of_sugar_or_sweetener_do_you_add,
    style = before_todays_tasting_which_of_the_following_best_described_what_kind_of_coffee_you_like,
    strength = how_strong_do_you_like_your_coffee,
    roast_level = what_roast_level_of_coffee_do_you_prefer,
    caffeine = how_much_caffeine_do_you_like_in_your_coffee,
    expertise = lastly_how_would_you_rate_your_own_coffee_expertise,
    starts_with("coffee"),
    prefer_abc = between_coffee_a_coffee_b_and_coffee_c_which_did_you_prefer,
    prefer_ad = between_coffee_a_and_coffee_d_which_did_you_prefer,
    prefer_overall = lastly_what_was_your_favorite_overall_coffee,
    wfh = do_you_work_from_home_or_in_person,
    total_spend = in_total_much_money_do_you_typically_spend_on_coffee_in_a_month,
    why_drink = why_do_you_drink_coffee,
    why_drink_other = other_reason_for_drinking_coffee,
    taste = do_you_like_the_taste_of_coffee,
    know_source = do_you_know_where_your_coffee_comes_from,
    most_paid = what_is_the_most_youve_ever_paid_for_a_cup_of_coffee,
    most_willing = what_is_the_most_youd_ever_be_willing_to_pay_for_a_cup_of_coffee,
    value_cafe = do_you_feel_like_you_re_getting_good_value_for_your_money_when_you_buy_coffee_at_a_cafe,
    spent_equipment = approximately_how_much_have_you_spent_on_coffee_equipment_in_the_past_5_years,
    value_equipment = do_you_feel_like_you_re_getting_good_value_for_your_money_with_regards_to_your_coffee_equipment,
    gender,
    gender_specify = gender_please_specify,
    education_level,
    ethnicity_race,
    ethnicity_race_specify = ethnicity_race_please_specify,
    employment_status,
    number_children = number_of_children,
    political_affiliation
  ) |>
  arrange(submission_id) |>
  rowid_to_column('submission_number')
```

```{r}
coffee |> 
  skimr::skim()
```

```{r}
freq_table <- compose(~sort(.x, decreasing = T), ~.x*100, prop.table, table)
coffee$prefer_abc |> freq_table()
coffee$prefer_ad |> freq_table()
coffee$prefer_overall |> freq_table()
```
## Demographics

```{r}
coffee$gender |> freq_table()
```

```{r}
coffee$age |> freq_table()
```

```{r}
coffee$cups |> freq_table()
```

```{r}
(coffee$brew |> str_split(', ') |> unlist() |> table())/sum(!is.na(coffee$brew))*100
```

```{r}
coffee$expertise |> table()
```


```{r}
coffee$coffee_a_personal_preference |> table()
coffee$coffee_a_personal_preference |> table()
```

```{r}
coffee |>
  skimr::skim()
```

```{r}
coffee_unique <- coffee |>
  select(-submission_id) |>
  summarise(across(where(is.character), \(x) length(unique(unlist(strsplit(x, ', '))))))
coffee_unique_count <- coffee |>
  select(-submission_id) |>
  summarise(across(where(is.character), \(x) list(table(unlist(strsplit(x, ', '))))))
```

```{r}
notes <- list(
  a = coffee |>
    select(submission_number, coffee_a_notes) |>
    drop_na(coffee_a_notes),
  b = coffee |>
    select(submission_number, coffee_b_notes) |>
    drop_na(coffee_b_notes),
  c = coffee |>
    select(submission_number, coffee_c_notes) |>
    drop_na(coffee_c_notes),
  d = coffee |>
    select(submission_number, coffee_d_notes) |>
    drop_na(coffee_d_notes)
)
```

```{r}
cat("The following were various notes made about a coffee in a blind taste test. Each comment about the taste of the coffee is on a new line with an ID followed by the taste note. Please identify any distinct recurring taste notes and store the corresponding ID from a few comments where the note was mentioned as evidence. Return the data in the form of json with this structure: {'note 1 here': [2,5,10], 'note 2 here': [2,5,10], etc.}. Try to ensure that at least about 5 of the comments gives a similar taste note.\n")
cat(paste0(notes$d[1:250,1,drop=T],' ', notes$d[1:250,2,drop=T]), sep='\n')
```

```{r}
patterns_classifier <- list(
  fruit = "(?i)fruit.", 
  honey = "(?i)honey", 
  apple = "(?i)apple",
  choc = "(?i)choc",
  citrus = "(?i)citrus",
  sour = "(?i)sour",
  nutty = "(?i)(nutty|nut)",
  smooth = "(?i)smooth",
  bright = "(?i)bright",
  smoky = '(?i)smok',
  balanced = '(?i)balanced',
  caramel = '(?i)caramel',
  earthy = '(?i)earth',
  sweet = '(?i)sweet',
  cherry = '(?i)(cherry|cherries)',
  berry = '(?i)(berry|berries)',
  floral = '(?i)floral',
  fermented = '(?i)ferment',
  complex = '(?i)(complex|complicated)',
  blueberry = '(?i)blueberry',
  raspberry = '(?i)raspberry',
  juicy = '(?i)juicy'
)
```

```{r}
for(note in names(patterns_classifier)) {
  coffee[paste0('note_a_', note)] <- str_detect(coffee$coffee_a_notes, pattern = patterns_classifier[[note]])
  coffee[paste0('note_b_', note)] <- str_detect(coffee$coffee_b_notes, pattern = patterns_classifier[[note]])
  coffee[paste0('note_c_', note)] <- str_detect(coffee$coffee_c_notes, pattern = patterns_classifier[[note]])
  coffee[paste0('note_d_', note)] <- str_detect(coffee$coffee_d_notes, pattern = patterns_classifier[[note]])
}
```

```{r}
coffee |> 
  summarise(across(everything(), compose(mean, `!`, is.na))) |>
  pivot_longer(everything(), names_to = 'variable', values_to = 'prop_not_missing') |>
  filter(prop_not_missing < .25)
```

